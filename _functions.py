from _constants import ACTION, LINK, RESET, WARNING
from dotenv import load_dotenv
from os import path, getenv
import re
from re import Pattern
from subprocess import run

load_dotenv()


def create_action_string(*actions, colored=True, last_use_or=True):
    """
    Constructs a string which represents actions made available to the user.
    :param   actions:
    :param   colored: Whether to add color to the formatting of the generated string.
    :param   last_use_or: Whether the last element of the action set, in sets of 3 or more should use the word or instead
               of a trailing comma.
    :return: The formatted string generated by this method. (action1, action2 or action3) etc.
    """
    str_builder = '('
    length = len(actions)

    for i in range(length):
        if colored:
            str_builder += f'{ACTION}{actions[i]}{RESET}'
        else:
            str_builder += f'{actions[i]}'

        if length > 2 and i == length - 2 and last_use_or:
            str_builder += ' or '
            continue

        if i < (length - 1):
            str_builder += '/'

    str_builder += f'{RESET})'

    return str_builder


# TODO Reconsider how this is set up
def sanitize_output(output):
    """
    Sanitizes strings of double linebreaks :param output: The string to sanitize :return: A two-value tuple where the
    first value is the sanitized string, the second is a bool representing if any linebreaks were found
    """
    copyable = True
    display = output
    if "\n" in output:
        output = output.replace('\n\n', '\n')
        display = f'\n{output}{RESET}\n'
        copyable = False
    return display, copyable


def dprint(string):
    """
    Print a debug message with the prefix '[Debug] ' if DEBUG is enabled in the environment.
    :param string: The string to be logged if debugging is active.
    """
    if is_debugging():
        print(f'[Debug] {string}')


# TODO Use this
def equals_any(compare, *to, ignore_case=True):
    """
    Returns True if the `compare` value is equal to any of the `to` values, False otherwise.
    :param compare: The value to compare.
    :param to: A list of values to compare against.
    :param ignore_case: Whether to ignore case when comparing values.
    :return: Whether `compare` equals any of the `to` values, False otherwise.
    """
    if not isinstance(compare, str):
        raise TypeError('compare must be a string.')
    if not isinstance(ignore_case, bool):
        raise TypeError('ignore_case must be a boolean value.')

    if len(to) == 0:
        if len(compare) == 0:
            return True
        else:
            return False

    for t in to:
        if ignore_case:
            compare = str(compare).lower()
            t = t.lower()
        if compare == t:
            return True
    return False


def is_debugging():
    """
    Checks if debugging is active in the environment. Specifically checks if Debug==True in the environment (Def: .env)
    :return: Whether debugging is active in the environment.
    """
    return bool(str.lower(getenv('DEBUG', 'False')))


def is_valid_url(url):
    """
    Checks if the supplied URL is a valid URL,
      meaning if it matches the pattern supplied by #compile_url_regex_pattern()
    :param url: The URL to validate by the fixed pattern.
    :return: Whether the URL supplied is a valid one.
    """
    if not isinstance(url, str):
        raise TypeError('url must be a string')
    pattern = compile_url_regex_pattern()
    return pattern.match(url) is not None


def get_python_cmd():
    """
    Checks what the python command is within the environment. Default: "python", others could include "python3", etc.
      Set within the .env file under key "PYTHON_CMD" (see .env.example)
    :return: The results of getenv('PYTHON_CMD'), deferring to default "python" if variable is unavailable.
    """
    return getenv('PYTHON_CMD', 'python')


def log_and_exit(filename, exitcode=0, thankful=True):
    """
    Prints a nice exit message including the supplied filename then executes an exit code.
    :param filename: Usually passed __file__ within the scope it is employed.
    :param exitcode: The exit code to use when exiting the program. Default 0 (success.)
    :param thankful: Whether to append a small thank you to the message. Default True.
    :return:
    """
    exit_msg = f'[Base64CLI] Exiting {WARNING}{path.basename(filename)}{RESET}...'
    if thankful:
        exit_msg += f' Thank you for using Base64CLI \u263A'
    print(exit_msg)
    exit(exitcode)


# Inspection disabled because this is the only pattern which would succeed with our data sets
# noinspection RegExpUnnecessaryNonCapturingGroup
def compile_url_regex_pattern() -> Pattern:
    """
    Regex pattern for matching with whole URLs, including the subdirectories and trailing slashes. Thanks ChatGPT!
    :return: The compiled regex Pattern.
    """
    return re.compile(r'(https?://[^/]+\b(?:/.*?))(?=\s|\)|$)')


def match_and_get_urls(string):
    """
    Grabs all URLs contained in the string and assembles them in an array.
    :param string: The string to check.
    :return: The array of URLs as strings, or None is no URLs were found.
    """
    urls = []

    for match in compile_url_regex_pattern().findall(string):
        urls.append(match)

    if len(urls) == 0:
        return None

    return urls


def match_and_replace_urls(string):
    """
    Substitutes all URLs in a string with themselves prepended with the LINK color constant (console blue.)
    :param string: The string to replace URLs within.
    :return: The string with the URLs color-coded for console output.
    """
    matches = compile_url_regex_pattern().finditer(string)

    if matches is not None:
        for match in matches:
            domain = match.group(1)
            string = string.replace(match.group(), f'{LINK}{domain}{RESET}')

    return string


def on_keyboard_interrupt(filename):
    """
    Handles the graceful exiting on KeyboardInterrupt.
    :param filename: Usually __file__ passed from the scope this is called in.
    """
    print()
    if is_debugging():
        debug_str = f'{WARNING}KeyboardInterrupt detected! ' \
                    f'Users can gracefully exit the program by entering "Q" on input.{RESET}'
        dprint(debug_str)
    log_and_exit(filename)


def return_to_main():
    """
    Prints a newline and runs main.py to return to the application's super menu.
    """
    print('')
    run_py('main.py')
    exit()


# TODO Improve to replace calls of subprocess.run in main.py
def run_py(pyfile):
    """
    Runs a python script by substituting the environment's PYTHON_CMD for the path executable and appending the
    pyfile to it :param pyfile: The Python script to execute
    """
    if not pyfile.endswith('.py'):
        pyfile += '.py'
    run([getenv('PYTHON_CMD', 'python'), pyfile])
